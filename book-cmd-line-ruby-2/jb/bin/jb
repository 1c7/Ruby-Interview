#!/usr/bin/env ruby
=begin

总体结构

  定义
    函数 main
    函数 execute_command
    class context

  执行
    OptionParser 读参数做 -h --help 这俩还不一样, --help 的信息长一些
    读 ARGV 拿文件名


没具体读了, 需要的时候再细看吧
=end
require 'json'
require 'readline'
require 'optparse'

# 主函数
def main(json_file)
  root = JSON.parse(File.read(json_file)) # 读文件
  command = nil

  current_context = Context.new(root,nil)

  while command != 'exit' # 只要命令不是退出
    command = Readline.readline("> ",true)
    break if command.nil? # for Ctrl+D
    # execute the command
    current_context = execute_command(command.strip, current_context)
  end
end

def execute_command(command,current_context)
  case command
  when /^ls$/
    puts current_context.to_s
  when /^cd (.*$)/
    new_context = current_context.cd($1)
    if new_context.nil?
      puts "No such key #{$1}"
    else
      current_context = new_context
    end
  when /^cat (.*)$/
    item = current_context.cat($1)
    if item.nil?
      puts "No such item #{$1}"
    else
      puts item.inspect
    end
  when /^help$/
    puts "cat <item> - print the contents of <item> in the current context"
    puts "cd  <item> - change context to the context of <item>"
    puts "cd  ..     - change up one level"
    puts "ls         - list available items in the current context"
  end
  current_context
end

class Context
  attr_reader :here
  attr_reader :parent_context

  def initialize(here,parent_context)
    @here = here
    @parent_context = parent_context
  end

  def cat(path)
    item_at(path)
  end

  def cd(path)
    if path == '..'
      self.parent_context
    else
      item = item_at(path)
      if item.nil?
        nil
      else
        Context.new(item,self)
      end
    end
  end

  def to_s
    if self.here.kind_of? Array
      indices = []
      self.here.each_index { |i| indices << i }
      indices.join(' ')
    elsif self.here.kind_of? Hash
      self.here.keys.join(' ')
    else
      self.here.to_s
    end
  end

  private

  def item_at(path)
    if path == '..'
      self.parent_context.here
    elsif self.here.kind_of? Array
      self.here[path.to_i]
    elsif self.here.kind_of? Hash
      self.here[path]
    else
      nil
    end
  end
end

#=====================================================

# 输个 banner
option_parser = OptionParser.new do |opts|
  executable_name = File.basename($PROGRAM_NAME)
  opts.banner = "Interactively browse a JSON file
Usage: #{executable_name} json_file"
end

option_parser.parse!

# 第一个参数就是 json_file
json_file = ARGV.shift
if json_file && File.exists?(json_file)
  puts json_file
  main(json_file)
else
  STDERR.puts "error: you must provide a JSON file as an argument"
  exit 1
end
